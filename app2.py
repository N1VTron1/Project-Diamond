import socket, ssl
import json
import requests
import uuid
import sys, os
import datetime
import hashlib,hmac, base64
import pysftp, getpass
from datetime import datetime

"""
Description: Deploys a server
Throws: Exception e
Returns: Secure transfer protocol 
"""

def set_connection():
	activity_description = "App2: Deploy App 2"
	pass_activity = "true"
	try:
		s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		ssl_sock = ssl.wrap_socket(s, server_side=True, certfile="server.crt", keyfile="server.key")
		ssl_sock.bind(('localhost', 8080))
		post_log(activity_description, pass_activity)

	except:
		e = sys.exc_info()[0]
		pass_activity = "false"
		post_log(activity_description, pass_activity)

	return ssl_sock

"""
Description: Puts the server in the listening mode and awaits for payload
Parameters: ssl_sock - Secure transfer protocol
Throws: Exception e
"""


def receive_payload(ssl_sock):
	activity_description = "App2: Receive payload from App 1" 
	pass_activity = "true"
 
	try:
		ssl_sock.listen(5)
		while True:
			(clientsocket,address) = ssl_sock.accept()
			payload = clientsocket.recv(2048)
			payloadJSON = json.loads(payload.decode("utf-8"))
			signature = hash_payload(json.dumps(payloadJSON))
			append_hash(signature)
			send_payload_sftp()
			post_log(activity_description, pass_activity)

	except:
		e = sys.exc_info()[0]
		print(e)
		pass_activity = "false"
		post_log(activity_description, pass_activity)


"""
Description: Generate hash signature from the JSON payload object
Parameters: payload - the JSON payload
Return: SHA256 hash signature
Throws: Exception e
"""


def hash_payload(payload): 
	activity_description = "App2: Generate hash signature"
	pass_activity = "true"
	key = "F83643162B34BA8C5DED157F47273" 

	try:
		encodedPayload = payload.encode('utf-8')
		encodedKey = key.encode('utf-8')
		digesterSHA256 = hmac.new(encodedKey, encodedPayload, hashlib.sha256)
		digestSHA256 = digesterSHA256.hexdigest()
		post_log(activity_description, pass_activity)

	except:
		e = sys.exc_info()[0]
		print(e)
		pass_activity = "false"
		post_log(activity_description, pass_activity)

	return digestSHA256

"""
Description: Appends hash to a JSON file
Parameters: signature - a hash signature generated by hash_payload method 
Throws: Exception e
"""


def append_hash(signature):
	activity_description = "App2: Append hash signature to the payload"
	pass_activity = "true"

	try:
		with open('send/App1jsonFile.json', 'a') as jsonFile:
			jsonFile.write(signature)
			jsonFile.close()

		post_log(activity_description, pass_activity)

	except:
		e = sys.exc_info()[0]
		print(e)
		pass_activity = "false"
		post_log(activity_description, pass_activity)

"""
Description: Sends JSON file to the receive folder
Throws: Exception e
"""


def send_payload_sftp():
	activity_description = "Sent json payload to receive folder"
	pass_activity = "true"

	user = getpass.getuser()
	p = getpass.getpass()
	cnopts = pysftp.CnOpts()
	cnopts.hostkeys = None

	cinfo = {'cnopts': cnopts, 'host':'oz-ist-lvmjxo.oz.psu.edu', 'username':user, 'password':p, 'port':1855}

	try:
		with pysftp.Connection (**cinfo) as sftp:
			sftp.get('ProjectDiamond/abist411fa22team1/send/App1jsonFile.json')
			sftp.put('App1jsonFile.json','ProjectDiamond/abist411fa22team1/receive/App1jsonFile.json')
			sftp.remove('ProjectDiamond/abist411fa22team1/send/App1jsonFile.json')

		post_log(activity_description, pass_activity)

	except:
		e = sys.exc_info()[0]
		print(e)
		pass_activity = "false"
		post_log(activity_description, pass_activity)

"""
Description: Posts a log to mongoDB database
Parameters: description - A description specifying the action performed by the method
Parameters: pass_activity - Specifies if the method passed or failed
"""


def post_log(description, pass_activity):
	uniqueID = str(uuid.uuid4())
	current_time = datetime.now()
	timestamp = current_time.strftime("%Y-%m-%d %H:%M:%S")
	headers = {'Content-Type': 'application/json'}
	data = '[{"id": "'+uniqueID+'", "activityDescription": "'+description+'", "timestamp": "'+timestamp+'", "pass": "'+pass_activity+'"}]'
	response = requests.post('http://127.0.0.1:5000/logs', headers=headers, data=data)

try:
	ssl_sock = set_connection()
	receive_payload(ssl_sock)

except Exception as e:
        print(e)

