import json
import requests
import uuid
import smtplib
from email.mime.text import MIMEText
import sys
import threading
from threading import Thread
import datetime
import hashlib,hmac, base64
from datetime import datetime


with open('receive/App1jsonFile.json', 'r') as f:
	payload = f.read()

payload = str(payload)
json_payload = (payload[0:(len(payload) - 64)]).strip()
received_hash = (payload[len(json_payload):]).strip()

"""
Description: Generate hash signature from the json_payload object
Parameters: payload - the JSON payload with a removed hash signature
Return: SHA256 hash signature
Throws: Exception e
"""


def hash_payload(payload):

	activity_description = "App3: Generate hash signature of a received file"
	pass_activity = "true"
	key = "F83643162B34BA8C5DED157F47273"

	try:
		encodedPayload = payload.encode('utf-8')
		encodedKey = key.encode('utf-8')
		digesterSHA256 = hmac.new(encodedKey, encodedPayload, hashlib.sha256)
		digestSHA256 = digesterSHA256.hexdigest()
		post_log(activity_description, pass_activity)

	except:
		e = sys.exc_info()[0]
		print(e)
		pass_activity = "false"
		post_log(activity_description, pass_activity)

	return digestSHA256


"""
Description: Compares 2 hash signatures 
Parameters: hash1 - the hash signature generated by the hash_payload method
Parameters: hash2 - the hash  signature stored as received_hash variable
Return: a boolean stating if the signatures are the same 
Throws: Exception e
"""

def compare_hash(hash1, hash2):

	activity_description = "App3: Compare hash signatures"
	pass_activity = "true"

	if hmac.compare_digest(hash1, hash2):
		post_log(activity_description, pass_activity)
		print("Hash matches")
		return pass_activity
	else:
		pass_activity = "false"
		print("Hash does not match")
		post_log(activity_description, pass_activity)
		return pass_activity


"""
Description: Send JSON payload to a specified email
Parameters: email - an Email to which the JSON payload will be sent
Return: A boolean stating if the method was successfully completed
Throws: Exception e
"""


def send_file_email(email):

	fromAddress = email
	toAddress = email
	subject = 'JSON payload'

	with open('receive/App1jsonFile.json', 'r') as f:
		payload = f.read()

	msg = MIMEText(json_payload)
	msg['Subject'] = subject
	msg['From'] = fromAddress
	msg['To'] = toAddress

	try:
		s = smtplib.SMTP_SSL('authsmtp.psu.edu', 465)
		s.sendmail(fromAddress, [toAddress], msg.as_string())
		return True

	except:
		e = sys.exc_info()[0]
		return False

	finally:
		s.quit()

"""
Description: Posts a log to mongoDB database
Parameters: description - A description specifying the action performed by the method
Parameters: pass_activity - Specifies if the method passed or failed
"""


def post_log(description, pass_activity):
	uniqueID = str(uuid.uuid4())
	current_time = datetime.now()
	timestamp = current_time.strftime("%Y-%m-%d %H:%M:%S")
	headers = {'Content-Type': 'application/json'}
	data = '[{"id": "'+uniqueID+'", "activityDescription": "'+description+'", "timestamp": "'+timestamp+'", "pass": "'+pass_activity+'"}]'
	response = requests.post('http://127.0.0.1:5000/logs', headers=headers, data=data)

"""
Description: Sends email to multiple people
Throws: Exception e
"""


def run_threads():

	activity_description = "App3: Send payload as email"
	pass_activity = "true"

	emails = ["aza5975@psu.edu", "axb5176@psu.edu", "cfp5317@psu.edu", "naa5453@psu.edu", "rlu5042@psu.edu", "aob5659@psu.edu"]
	threads = list()

	try:
		for index in range(6):
			x = threading.Thread(target = send_file_email, args =(emails[index], ))
			x.start()
		post_log(activity_description, pass_activity)
	except:
		e = sys.exc_info()[0]
		pass_activity = "false"
		post_log(activity_description, pass_activity)

try:

	payload_hash = hash_payload(json_payload)
	compare_hash(payload_hash, received_hash)
	run_threads()

except Exception as e:
	print(e)

